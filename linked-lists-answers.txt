1) What are some pros and cons of using linked lists instead of arrays?

Pros - can easily insert of remove nodes from the list without reorganization of the entire data structure.
Popular when developers donnâ€™t know how many items an array will ultimately contain.
Cons - Random access of elements is not allowed and search operation is slow
uses more memory than arrays

2) Come up with a real world example of a linked lists


Programming Questions

1) The linked list push function should take a value, create a node, and add it to the end of a list. Below is pseudocode for a push function for a singly linked list. However, there is something wrong with it. Submit both an explanation of the bug and a functional implementation of the method.

 there isn't a while loop in the function to traverse the nodes, i've added one in the pseudocode
FUNCTION push(element)
CREATE node
SET node.value TO element
SET node.next TO null

IF the head node does not exist
 THEN SET head to node
ELSE
 SET current to head
 END IF
 WHILE current does not exist
 SET current to current.next
END WHILE
SET current.next to node
RETURN node
END FUNCTION

function Node(data) {
  this.data = data;
  this.next = null
}

function LinkedList(){
  this.length = 0
  this.head = null
}
LinkedList.prototype.add = function(val){
  if(!val){
    throw new Error("Please pass in a value")
  }
  var node = new Node(val);
  //if there is no head set node to head of LinkedList
  if(!this.head){
    this.head = node;
    this.length += 1;
    return node
  }
  var current = this.head;
  while(current.next) {
    current = current.next
  }
  current.next = node;
  this.length += 1;
  return node
}

var sll = new LinkedList();
sll.add(1);
sll.add(2)
console.log(sll)


2) Given an unsorted singly linked list, remove all duplicates from the linked list.
Example
Input: a -> c -> d -> d -> a
Output: a -> c -> d

3) Given an unsorted singly linked list, reverse it.
Example
Input: a -> b -> c -> d
Output: d -> c -> b -> a